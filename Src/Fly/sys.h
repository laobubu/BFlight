#ifndef __EPIC_SYS_H
#define __EPIC_SYS_H

///EPIC System is designed to manage every nut.



// <<< Use Configuration Wizard in Context Menu >>>
// <o> System Tick Timer Interval (us) <1-1000>
#define ES_TickInterval 20


///////////// ST HAL Driver for STM32F4
/** 
Driver Requirements:
	1. SysTick
		a) EpicSys will overwrite the SysTick->LOAD. 
		   Make sure the original value is generated by CubeMX.
		b) You shall add ESC_SysTick(void); to your ISR function.
	
 */
#if defined(USE_HAL_DRIVER) && defined(STM32F407xx)
#define STM32F4
#include "stm32f4xx_hal.h"
#include <stdint.h>




//////////// Renesas RL78 Driver
/** 
Driver Requirements:
	1. TAU0_Channel6 as SysTick
		a) You shall add ESC_SysTick(void); to your ISR function.
		b) Remember to set ES_TickInterval (see above)
	2. Data Format
		a) "struts packed" shall be set in "Build Tool"
 */
#elif  defined(RENESAS)
#define RL78
#include "r_cg_macrodriver.h"




//////////// Unknown Driver
#else
#error Undefined Epic System Driver
#endif


//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

//util function
void ES_Init(void);
uint32_t millis(void);
uint32_t micros(void);
void delay_ms(uint16_t ms);
void delay_us(uint16_t us);

//callbacks which shall be called in interrupt functions
void ESC_SysTick(void);

///////////////////////////////////////////////////////////
///Pin Functions
///
///(*) Please Read `pin_map.h`! 
///(*) Please Read `pin_map.h`! 
///(*) Please Read `pin_map.h`! 
///
///(*) To use these function, please #include "pin_map.h"
///(*) To use these function, please #include "pin_map.h"
///(*) To use these function, please #include "pin_map.h"

#if defined(STM32F4)
#define _ESP_Read(GROUP, PORT)		(((GPIO##GROUP)->IDR & (1<<PORT))?1:0)
#define _ESP_Set(GROUP, PORT)		(GPIO##GROUP)->BSRR = (1<<PORT)
#define _ESP_Reset(GROUP, PORT)		(GPIO##GROUP)->BSRR = (1<<PORT)<<16
#define _ESP_SetOut(GROUP, PORT)	(GPIO##GROUP)->MODER |=  (1<<(PORT<<1))
#define _ESP_SetIn(GROUP, PORT)		(GPIO##GROUP)->MODER &= ~(1<<(PORT<<1))



#elif defined(STM32F1)
#define _ESP_Read(GROUP, PORT)   	(((GPIO##GROUP)->IDR & (1<<PORT))?1:0)
#define _ESP_Set(GROUP, PORT)		(GPIO##GROUP)->BSRR = (1<<PORT)
#define _ESP_Reset(GROUP, PORT)		(GPIO##GROUP)->BRR = (1<<PORT)
#define _ESP_SetOut(GROUP, PORT)	if(PORT<=7){(GPIO##GROUP)->CRL&=~(0XF<<PORT);GPIOB->CRL|=0x3<<PORT;} \
									else {(GPIO##GROUP)->CRH&=~(0XF<<(PORT-8));GPIOB->CRH|=0x3<<(PORT-8);}
#define _ESP_SetIn(GROUP, PORT)		if(PORT<=7){(GPIO##GROUP)->CRL&=~(0XF<<PORT);GPIOB->CRL|=0x8<<PORT;} \
									else {(GPIO##GROUP)->CRH&=~(0XF<<(PORT-8));GPIOB->CRH|=0x3<<(PORT-8);}


#elif defined(RL78)
#define _ESP_Read(GROUP, PORT)		P##GROUP##.##PORT
#define _ESP_Set(GROUP, PORT)		P##GROUP##.##PORT = 1;
#define _ESP_Reset(GROUP, PORT)		P##GROUP##.##PORT = 0;
#define _ESP_SetOut(GROUP, PORT)	PM##GROUP##.##PORT = 0;
#define _ESP_SetIn(GROUP, PORT)		PM##GROUP##.##PORT = 1;

#endif

								
#define ESP_Read(PINObject) 	_ESP_Read(PINObject)
#define ESP_Set(PINObject) 		_ESP_Set(PINObject)
#define ESP_Reset(PINObject)	_ESP_Reset(PINObject)
#define ESP_SetOut(PINObject)	_ESP_SetOut(PINObject)
#define ESP_SetIn(PINObject)	_ESP_SetIn(PINObject)
#define ESP_Set2(v, PINObject)	if(v){_ESP_Set(PINObject);}else{_ESP_Reset(PINObject);}


#endif
